package vienan.app.journey.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import vienan.app.journey.model.ProvinceBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table province.
*/
public class ProvinceBeanDao extends AbstractDao<ProvinceBean, Long> {

    public static final String TABLENAME = "province";

    /**
     * Properties of entity ProvinceBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Province_name = new Property(1, String.class, "province_name", false, "PROVINCE_NAME");
        public final static Property Province_code = new Property(2, String.class, "province_code", false, "PROVINCE_CODE");
    };


    public ProvinceBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ProvinceBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'province' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PROVINCE_NAME' TEXT," + // 1: province_name
                "'PROVINCE_CODE' TEXT);"); // 2: province_code
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_province__id ON province" +
                " (_id);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'province'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProvinceBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String province_name = entity.getProvince_name();
        if (province_name != null) {
            stmt.bindString(2, province_name);
        }
 
        String province_code = entity.getProvince_code();
        if (province_code != null) {
            stmt.bindString(3, province_code);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProvinceBean readEntity(Cursor cursor, int offset) {
        ProvinceBean entity = new ProvinceBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // province_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // province_code
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProvinceBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProvince_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProvince_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProvinceBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ProvinceBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
